{"mappings":";;AEAA;;;;CAIC,GACD,MAAM,0CAAoB,CAAC;IAC1B,OAAO,cACL,QAAQ,QAAK,IACb,QAAQ,KAAK,KACb,QAAQ,KAAK,YACb;AACH;AAEA;;;;;CAKC,GACD,MAAM,wCAAkB,CAAC,aAAa;IACrC,OAAO,YACL,cACA,MAAM,WACN,IAAI,CAAC,OAAS,KAAK;AACtB;AAEA,4BAAiB;uBAChB;qBACA;AACD;;;kDD7BM;gDAAA;AAEN;;CAEC,GACD,MAAM,wCAAkB;AAExB;;;;;CAKC,GACD,MAAM,6BAAO,CAAC;IACb,4BAA4B;IAC5B,MAAM,cAAc,SAAS,iBAAiB,KAAK,CAAC,EAAE,CAAC,YAAY;IAEnE,MAAM,sBAAsB,YAAY,MAAM,sCAAgB,CAAC,EAAE;IACjE,MAAM,gBAAgB,YAAY,QAAQ,uCAAiB,IAAI;IAE/D,SAAS,QAAQ,OAAO,oBAAoB,MAAM,GAAG;IACrD,SAAS,QAAQ,gBAAgB;IACjC,OAAO;AACR;AAEA;;;;;CAKC,GACD,MAAM,yCAAmB,CAAC;IACzB,MAAM,eAAE,WAAW,EAAE,GAAG;WAAI,SAAS,iBAAiB;KAAM,CAAC,GAAG;IAEhE,MAAM,cAAc,0CAAgB,aAAa;IACjD,MAAM,UAAU,KAAK,UAAU;IAC/B,SAAS,QAAQ,2BAA2B;IAC5C,OAAO;AACR;AAEA;;;;;CAKC,GACD,MAAM,iCAAW,CAAC;IACjB,MAAM,eAAE,WAAW,EAAE,GAAG;WAAI,SAAS,iBAAiB;KAAM,CAAC,GAAG;IAChE,MAAM,CAAC,MAAM,KAAK,GAAG,0CAAgB,aAAa;IAElD,SAAS,QAAQ,aAAa,4CAAkB;IAChD,SAAS,QAAQ,aAAa,4CAAkB;IAChD,OAAO;AACR;AAEA;;;;;CAKC,GACD,MAAM,kCAAY,CAAC;IAClB,MAAM,eAAE,WAAW,EAAE,GAAG;WAAI,SAAS,iBAAiB;KAAM,CAAC,GAAG;IAEhE,MAAM,CAAC,YAAY,aAAa,GAAG,YAAY,MAAM;IACrD,QAAQ,IAAI,kBAAkB;IAE9B,MAAM,kBAAkB,0CAAgB,YAAY;IACpD,MAAM,iBAAiB,KAAK,UAAU;IACtC,SAAS,QAAQ,YAAY;IAE7B,IAAI,cAAc;QACjB,MAAM,uBAAuB,0CAAgB,cAAc;QAC3D,MAAM,sBAAsB,KAAK,UAAU;QAC3C,SAAS,QAAQ,iBAAiB;IACnC;IAEA,OAAO;AACR;AAEA;;;;;CAKC,GACD,MAAM,qCAAe,CAAC;IACrB,MAAM,QAAQ;WAAI,SAAS,iBAAiB;KAAM;IAClD,IAAI,MAAM,WAAW,GAAG;QACvB,MAAM,eAAE,WAAW,EAAE,GAAG,KAAK,CAAC,EAAE;QAChC,MAAM,OAAO,SAAS;QACtB,SAAS,QAAQ,SAAS;IAC3B;IACA,OAAO;AACR;AAEA,4BAAiB;UAChB;sBACA;cACA;eACA;kBACA;AACD;;;qCDtGM;iDAAA;yCAAA;0CAAA;6CAAA;AAQN,MAAM,oCAAc,CAAC;IACpB,+BAAK,2CAAiB,mCAAS,oCAAU,uCAAa;AACvD;AAEA;OAAI,SAAS,iBAAiB;CAAsB,CAAC,IAAI","sources":["src/index.js","src/extractors.js","src/utils.js"],"sourcesContent":["const {\n\trate,\n\tpaymentFrequency,\n\tdeposits,\n\thowToOpen,\n\tnoticePeriod,\n} = require('./extractors');\n\nconst processARow = (row) => {\n\trate(paymentFrequency(deposits(howToOpen(noticePeriod(row)))));\n};\n\n[...document.querySelectorAll('tr:has(td a[href])')].map(processARow);\n","const { consistentDeposit, consistentArray } = require('./utils');\n\n/**\n * Match a percentage with 0..2 decimal places\n */\nconst percentageRegex = /\\d+(\\.\\d{1,2})?%/;\n\n/**\n * Extract the interest rate and save it to the row as a data value\n *\n * @param {HTMLTableRowElement} inputRow\n * @returns {HTMLTableRowElement}\n */\nconst rate = (inputRow) => {\n\t// Info in the second column\n\tconst textContent = inputRow.querySelectorAll('td')[1].textContent.trim();\n\n\tconst extractedPercentage = textContent.match(percentageRegex)[0];\n\tconst remainingText = textContent.replace(percentageRegex, '').trim();\n\n\tinputRow.dataset.rate = extractedPercentage.slice(0, -1);\n\tinputRow.dataset.rateQualifier = remainingText;\n\treturn inputRow;\n};\n\n/**\n * Extract the interest payment frequency and save it to the row as a data value\n *\n * @param {HTMLTableRowElement} inputRow\n * @returns {HTMLTableRowElement}\n */\nconst paymentFrequency = (inputRow) => {\n\tconst { textContent } = [...inputRow.querySelectorAll('td')].at(-3);\n\n\tconst arrayOutput = consistentArray(textContent, /or|,/);\n\tconst jsonOut = JSON.stringify(arrayOutput);\n\tinputRow.dataset.interestPaymentFrequency = jsonOut;\n\treturn inputRow;\n};\n\n/**\n * Extract the minimum and maximum deposits save them to the row as a data value\n *\n * @param {HTMLTableRowElement} inputRow\n * @returns {HTMLTableRowElement}\n */\nconst deposits = (inputRow) => {\n\tconst { textContent } = [...inputRow.querySelectorAll('td')].at(-2);\n\tconst [minD, maxD] = consistentArray(textContent, '/');\n\n\tinputRow.dataset.minDeposit = consistentDeposit(minD);\n\tinputRow.dataset.maxDeposit = consistentDeposit(maxD);\n\treturn inputRow;\n};\n\n/**\n * Extract the ways the account can be created and save it to the row as a data value\n *\n * @param {HTMLTableRowElement} inputRow\n * @returns {HTMLTableRowElement}\n */\nconst howToOpen = (inputRow) => {\n\tconst { textContent } = [...inputRow.querySelectorAll('td')].at(-1);\n\n\tconst [waysToOpen, openingNotes] = textContent.split(/[()]/);\n\tconsole.log('openingNotes: ', openingNotes);\n\n\tconst waysToOpenArray = consistentArray(waysToOpen, '/');\n\tconst waysToOpenJSON = JSON.stringify(waysToOpenArray);\n\tinputRow.dataset.howToOpen = waysToOpenJSON;\n\n\tif (openingNotes) {\n\t\tconst waysToOpenNotesArray = consistentArray(openingNotes, ',');\n\t\tconst waysToOpenNotesJSON = JSON.stringify(waysToOpenNotesArray);\n\t\tinputRow.dataset.howToOpenNotes = waysToOpenNotesJSON;\n\t}\n\n\treturn inputRow;\n};\n\n/**\n * Extract the required notice period and save it to the row as a data value\n *\n * @param {HTMLTableRowElement} inputRow\n * @returns {HTMLTableRowElement}\n */\nconst noticePeriod = (inputRow) => {\n\tconst cells = [...inputRow.querySelectorAll('td')];\n\tif (cells.length === 6) {\n\t\tconst { textContent } = cells[2];\n\t\tconst days = parseInt(textContent);\n\t\tinputRow.dataset.notice = days;\n\t}\n\treturn inputRow;\n};\n\nmodule.exports = {\n\trate,\n\tpaymentFrequency,\n\tdeposits,\n\thowToOpen,\n\tnoticePeriod,\n};\n","/**\n *\n * @param {string} depositString string representing the min or max deposit\n * @returns {string} consistent form of the deposit\n */\nconst consistentDeposit = (depositString) => {\n\treturn depositString\n\t\t.replace('Â£', '')\n\t\t.replace(',', '_')\n\t\t.replace('m', '_000_000')\n\t\t.trim();\n};\n\n/**\n *\n * @param {string} textContent The text extracted from the DOM\n * @param {RegExp|string} separator Where to split the string\n * @returns {string[]} Lowercase values without stray spaces\n */\nconst consistentArray = (textContent, separator) => {\n\treturn textContent\n\t\t.toLowerCase()\n\t\t.split(separator)\n\t\t.map((item) => item.trim());\n};\n\nmodule.exports = {\n\tconsistentDeposit,\n\tconsistentArray,\n};\n"],"names":[],"version":3,"file":"index.js.map"}